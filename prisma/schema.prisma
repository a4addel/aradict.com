generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique @db.VarChar(50) @default(cuid())
  hash          String?
  role          Role? @default(user)
  locale        String?
  rank          Int?       @default(999)
  joiningDate   DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  sounds        Sounds[]
  words         Words[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Words {
  id       String   @id @default(cuid())
  autherId String
  ar       String   @unique
  en       String
  auther   User     @relation(fields: [autherId], references: [id], onDelete: SetNull)
  sounds   Sounds[]
}

model Sounds {
  soundId  String @id @default(cuid())
  wordId   String
  autherId String
  fileName String
  auther   User   @relation(fields: [autherId], references: [id], onDelete: SetNull)
  word     Words  @relation(fields: [wordId], references: [id], onDelete: SetNull)
}

enum Role {
  admin
  soundContributer
  soundReviewer
  user
}
