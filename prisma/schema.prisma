// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String @id @db.Uuid @default(cuid())
  userId             String @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String  @id @db.Uuid @default(cuid())
  sessionToken String   @unique
  userId       String @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String  @id @default(cuid()) @db.Uuid
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  username String @db.VarChar(20)
  hash String
  role Role 
  joiningDate DateTime @default(dbgenerated("now()"))
  words Words[]
  sounds Sounds[]
  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Words {
  id String @id @db.Uuid @default(cuid())
  autherId String @db.Uuid

  ar String @unique
  en String

  auther User @relation(fields: [autherId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  sounds Sounds[]
}

model Sounds {
  soundId String @id @default(cuid()) @db.Uuid 
  wordId String @db.Uuid
  autherId String @db.Uuid

  fileName String
  



  auther User @relation(fields: [autherId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  word Words @relation(fields: [wordId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  

}


enum Role {
  admin
  soundContributer
  soundReviewer
}